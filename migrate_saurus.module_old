<?php

/*
 * You must implement hook_migrate_api(), setting the API level to 2, for
 * your migration classes to be recognized by the Migrate module.
 */
function migrate_saurus_migrate_api() {
  $api = array(
    'api' => 2,
    
    'groups' => array(
      'Saurus' => array(
        'title' => t('Import data from Saurus DB'),
      ),
    ),

    'migrations' => array(
      'SaurusTaxonomy' => array(
        'class_name' => 'SaurusTermMigration',
        'group_name' => 'Saurus',
      ),
      'SaurusUsers' => array(
        'class_name' => 'SaurusUserMigration',
        'group_name' => 'Saurus',
      ),
      'SaurusArticles' => array(
        'class_name' => 'SaurusNodeMigration',
        'group_name' => 'Saurus',
      ),
      'SaurusFiles' => array(
        'class_name' => 'SaurusFileMigration',
        'group_name' => 'Saurus',
      ),
    ),
  );
  return $api;
}

/*
 * Register our migrations on cache flush
 */
function migrate_saurus_flush_caches() {
  migrate_saurus_register_migrations();
}

/*
 * Register our migrations
 * TODO: arguments
 */
function migrate_saurus_register_migrations(){
  Migration::registerMigration('SaurusUserMigration', 'SaurusUsers');
  Migration::registerMigration('SaurusNodeMigration', 'SaurusArticles');
  Migration::registerMigration('SaurusTermMigration', 'SaurusTaxonomy');
  Migration::registerMigration('SaurusFileMigration', 'SaurusFiles');
  //Deregister old menu migration (later development to be continued)
  #Migration::deregisterMigration('SaurusMenu');
}


/*
 * Base class as abstract
 */
abstract class SaurusMigration extends Migration {
  public function __construct($arguments) {
    parent::__construct($arguments);

    $this->team = array(
      new MigrateTeamMember('Andy Kohv', 'andy@mekaia.com',
                            t('Programmer')),
    );
  }
  //Check if the date is a valid unix timestamp
  public function check_date($value) {
    if(strtotime($value)<0){
      return 0;    
    }else{
      return $value;    
    };
  }
}

/*
 * Migrate saurus users
 */
class SaurusUserMigration extends SaurusMigration {

  //if locked=1, return status=0 (disabled)
  protected function locked_to_status($value) {
    return !$value;
  }

  public function __construct($arguments) {
    parent::__construct($arguments);
    $this->description = t('Saurus users');

    $query = Database::getConnection('default', 'legacy_saurus')
            ->select('users','u')
            ->fields('u', array('user_id', 'email', 'username', 'password', 'firstname', 'lastname', 'created_date', 'last_access_time',
                    'is_locked', 'address'))
            ->condition('username', '','!=');

    $this->source = new MigrateSourceSQL($query);
    $this->destination = new MigrateDestinationUser();
    $this->map = new MigrateSQLMap($this->machineName,
        array('user_id' => array(
              'type' => 'int',
              'not null' => TRUE,
              'description' => 'User ID.'
              )
        ),
        MigrateDestinationUser::getKeySchema()
    );

    $this->addFieldMapping('name', 'username')
         ->dedupe('users', 'name');
    $this->addFieldMapping('mail', 'email');
    $this->addFieldMapping('created', 'created_date')
    ->callbacks(array($this,'check_date'));
    $this->addFieldMapping('access', 'last_access_time')
    ->callbacks(array($this,'check_date'));
    $this->addFieldMapping('status', 'is_locked')
    ->callbacks(array($this,'locked_to_status'));
    $this->addFieldMapping('init', 'email');

    $this->addFieldMapping('roles')
         ->defaultValue(DRUPAL_AUTHENTICATED_RID);
    $this->addFieldMapping('timezone')
         ->defaultValue('Europe/Tallinn');


    $this->addUnmigratedDestinations(array(
#      'access',
      'password',
      'data',
      'is_new',
      'language',
      'login',
      'picture',
      'role_names',
      'signature',
      'signature_format',
      'theme',
#      'timezone',
    ));
  }
}

class SaurusFileMigration extends Migration {
  public function __construct($arguments) {
    parent::__construct($arguments);
    $this->description = t('Node images');

    $query = Database::getConnection('default', 'legacy_saurus')
            ->select('obj_file','f')
            ->fields('f', array('objekt_id', 'fullpath', 'relative_path', 'filename', 'mimetype', 'size', 'lastmodified', 'is_deleted',
                    'profile_id', 'notes', 'kirjeldus'));
    $query->orderBy('objekt_id', 'DESC');
    $query->range(0,30);

    $this->source = new MigrateSourceSQL($query);
    $this->destination = new MigrateDestinationFile('file');
    $this->map = new MigrateSQLMap($this->machineName,
        array(
          'objekt_id' => array(
            'type' => 'int',
            'not null' => TRUE,
            'description' => 'File ID.',
            'alias' => 'f',
          )
        ),
        MigrateDestinationFile::getKeySchema()
    );

    $this->addFieldMapping('value', 'relative_path');
    $this->addFieldMapping('destination_file', 'relative_path');
    $this->addFieldMapping('source_dir')
         ->defaultValue('/home/devel/agri-andy');
    $this->addFieldMapping('file_replace')
         ->defaultValue('MigrateFile::FILE_EXISTS_REUSE');

    $this->addUnmigratedDestinations(array(
      'destination_dir',
      'fid',
      'path',
#      'file_replace',
      'preserve_files',
#      'source_dir',
      'timestamp',
      'uid',
      'urlencode',
    ));

  }
}

/*
 * Migrate articles as node:article
 */
class SaurusNodeMigration extends SaurusMigration {
  private $source_table_obj;  
  private $source_table_art; 
  private $source_table_obj_obj;  

  public function __construct($arguments) {
    parent::__construct($arguments);
    $this->description = t('Migrates saurus articles as nodes');

/*
SELECT `a`.`sisu` , `a`.`objekt_id`
FROM `obj_artikkel` AS `a`
LEFT JOIN `objekt` AS `o` ON `a`.`objekt_id` = `o`.`objekt_id`
WHERE `o`.`tyyp_id` =2
ORDER BY `a`.`objekt_id` DESC

****************
'objekt_id', 'pealkiri', 'tyyp_id', 'author', 'on_avaldatud', 'keel', 'aeg', 'created_user_id'

*/
    $this->source_table_obj = 'objekt';
    $this->source_table_obj_obj = 'objekt_objekt';
    $this->source_table_art = 'obj_artikkel';

    $query = Database::getConnection('default', 'legacy_saurus')
            ->select($this->source_table_obj,'o')
            ->fields('o', array('objekt_id', 'pealkiri', 'tyyp_id', 'author', 'on_avaldatud', 'keel', 'aeg', 'created_user_id'));
    $query->innerJoin($this->source_table_art, 'a', 'a.objekt_id = o.objekt_id');
    $query->innerJoin($this->source_table_obj_obj, 'oo', 'oo.objekt_id = a.objekt_id');
    $query->fields('a', array('sisu', 'lyhi'));
    $query->fields('oo', array('parent_id'));
    $query->condition('tyyp_id', '2','=');
    $query->orderBy('parent_id', 'ASC');

    $this->source = new MigrateSourceSQL($query);

    // Set up our destination - nodes of type migrate_example_beer
    $this->destination = new MigrateDestinationNode('article');

    $this->map = new MigrateSQLMap($this->machineName,
      array(
        'objekt_id' => array(
          'type' => 'int',
          'not null' => TRUE,
          'description' => 'Object ID.',
          'alias' => 'o',
        )
      ),
      MigrateDestinationNode::getKeySchema()
    );

    $this->addFieldMapping('title', 'pealkiri')
         ->description(t('Mapping "pealkiri" name in source to node title'));
    $this->addFieldMapping('uid', 'created_user_id')
          ->sourceMigration('SaurusUsers')
          ->defaultValue(0);

    $this->addFieldMapping('body', 'sisu');
    $this->addFieldMapping('body:summary', 'lyhi');
    $this->addFieldMapping('body:format')
    ->defaultValue('full_html');

    $this->addFieldMapping('field_tags:source_type')
         ->defaultValue(TRUE);
    $this->addFieldMapping('field_tags', 'parent_id')
         ->sourceMigration('SaurusTaxonomy');


    $this->addFieldMapping('created', 'aeg')
         ->callbacks(array($this,'check_date'));

    $this->addUnmigratedDestinations(array(
#        'body:format', 'body:language',
#      'changed',
#      'comment',
#      'created',
#        'field_migrate_example_country:language',
#        'field_migrate_example_image:destination_dir',
#        'field_migrate_example_image:destination_file',
#        'field_migrate_example_image:file_replace',
#        'field_migrate_example_image:language',
#        'field_migrate_example_image:preserve_files',
#        'field_migrate_example_image:urlencode',
#      'is_new',
#      'language',
#      'log',
#        'migrate_example_beer_styles:source_type',
#        'migrate_example_beer_styles:create_term',
#      'promote',
#      'revision',
#      'revision_uid',
#      'status',
#      'tnid',
    ));
  }
  

  /*
   *Process node content 
  */
  public function prepareRow($row) {
      $pattern = '/##saurus\d{0,3}code##/';
      $row->sisu = preg_replace($pattern, '', $row->sisu) . "\r\n<br>";
  }
}

class SaurusTermMigration extends Migration {
  public function __construct($arguments) {
    parent::__construct($arguments);
    $this->description =
      t('Migrate Saurus Taxonomy to Drupal');

    $source_table_obj = 'objekt';
    $source_table_obj_obj = 'objekt_objekt';
    $source_table_obj_rub = 'obj_rubriik';

    $query = Database::getConnection('default', 'legacy_saurus')
            ->select($source_table_obj,'o')
            ->fields('o', array('objekt_id', 'friendly_url', 'count', 'pealkiri', 'tyyp_id', 'author', 'on_avaldatud', 'keel', 'aeg', 'created_user_id', 'is_hided_in_menu'));
    $query->innerJoin($source_table_obj_obj, 'o_rel', 'o_rel.objekt_id = o.objekt_id');
    $query->leftJoin($source_table_obj, 'parents', 'parents.objekt_id = o_rel.parent_id');
    $query->addField('o_rel', 'parent_id');
    $query->addField('parents', 'pealkiri', 'parent_name');
    $query->condition('o.tyyp_id', '1','='); // 1=taxonomy term | 2=article | 3=link (internal/external)
    $query->condition('o.keel', '0', '=');
    $query->orderBy('parent_id', 'ASC');
    #$query->range(0,30);

    $this->source = new MigrateSourceSQL($query);

    $this->destination =
      new MigrateDestinationTerm('MenuTerms');

    $this->map = new MigrateSQLMap($this->machineName,
      array(
        'objekt_id' => array(
          'type' => 'int',
          'not null' => TRUE,
          'unsigned' => TRUE,
          'description' => 'Menu ID.',
          'alias' => 'o',
        ),
      ),
        MigrateDestinationTerm::getKeySchema()
      );

    $this->addFieldMapping('name', 'pealkiri');
    $this->addFieldMapping('description')
         ->defaultValue('Saurus menu term');

    $this->addFieldMapping('parent_name', 'parent_name');
    $this->addFieldMapping('parent', 'parent_id')
         ->sourceMigration($this->machineName);
    $this->addFieldMapping('format')
         ->defaultValue('filtered_html');
    $this->addFieldMapping('weight')
         ->defaultValue(0);
    $this->addFieldMapping('path','friendly_url');


  }
}


/*
 *Saurus menu structure migration
 * FIXME: This is deprecated, no simple way to map saurus taxonomy based menu into drupal router based menu
 */
class SaurusMenuMigration extends SaurusMigration {
  private $source_table_obj;  
  private $source_table_obj_obj;
  private $source_table_obj_rub;


/*
SELECT *
FROM objekt o
INNER JOIN obj_rubriik r ON r.objekt_id = o.objekt_id
INNER JOIN objekt_objekt oo ON oo.objekt_id = r.objekt_id
WHERE tyyp_id =1
AND r.objekt_id = o.objekt_id
GROUP BY pealkiri_strip
LIMIT 0 , 200
*/

/*
SELECT *
FROM 
objekt o
INNER JOIN objekt_objekt oo ON oo.objekt_id = o.objekt_id
WHERE  tyyp_id = 1 AND oo.objekt_id=o.objekt_id
GROUP BY pealkiri_strip
*/

  /*
  protected function createStub($migration) {
    // if ref_parent is 0, that means it has no parent, so don't create a stub
    if (!$migration->sourceValues->parent_id) {
      return FALSE;
    }
    $menu_link = array (
      'menu_name' => 'main-menu',
      'link_path' => 'stub-path',
      'router_path' => 'stub-path',
      'link_title' => t('Stub title'),
    );
    $mlid = menu_link_save($menu_link);
    if ($mlid) {
      return array($mlid);
    }
    else {
      return FALSE;
    }
  }
  */

  public function __construct($arguments) {
    parent::__construct($arguments);
    $this->description = t('Migrates saurus menu structure to drupal');

    $this->source_table_obj = 'objekt';
    $this->source_table_obj_obj = 'objekt_objekt';
    $this->source_table_obj_rub = 'obj_rubriik';

    $query = Database::getConnection('default', 'legacy_saurus')
            ->select($this->source_table_obj,'o')
            ->fields('o', array('objekt_id', 'friendly_url', 'count', 'pealkiri', 'tyyp_id', 'author', 'on_avaldatud', 'keel', 'aeg', 'created_user_id', 'is_hided_in_menu'));
    $query->innerJoin($this->source_table_obj_obj, 'oo', 'oo.objekt_id = o.objekt_id');
    $query->addField('oo', 'parent_id');
    $query->addField('oo', 'objekt_id', 'menu_id');
    $query->condition('tyyp_id', '1','=');
    $query->condition('friendly_url', '','!=');
    $query->groupBy('o.pealkiri_strip');
    $query->orderBy('objekt_id', 'DESC');
    $query->range(0,30);

    $this->source = new MigrateSourceSQL($query);

    $this->destination = new MigrateDestinationMenuLinks('menu');

    $this->map = new MigrateSQLMap($this->machineName,
      array(
        'objekt_id' => array(
          'type' => 'int',
          'not null' => TRUE,
          'unsigned' => TRUE,
          'description' => 'Menu ID.',
          'alias' => 'oo',
        ),
      ),
      MigrateDestinationMenuLinks::getKeySchema()
    );

    $source_fields = array(
      'new_nid' => t('new nid'),
      'new_pid' => t('new pid'),
    );



    // Mapped fields
    $this->addFieldMapping('link_title', 'pealkiri');
    $this->addFieldMapping('menu_name')->defaultValue('main_menu');
    $this->addFieldMapping('plid', 'new_pid');
    $this->addFieldMapping('link_path', 'new_nid');
    $this->addFieldMapping('router_path')
         ->defaultValue('node/%');
    $this->addFieldMapping('module')
         ->defaultValue('migrate_saurus');
    $this->addFieldMapping('hidden','is_hided_in_menu');
    $this->addFieldMapping('external')
         ->defaultValue(0);

    $this->addFieldMapping('has_children')
         ->defaultValue(0);
    $this->addFieldMapping('expanded')
         ->defaultValue(0);
    $this->addFieldMapping('weight')
         ->defaultValue(0);
    $this->addFieldMapping('depth')
         ->defaultValue(0);
    $this->addFieldMapping('customized')
         ->defaultValue(0);
    $this->addFieldMapping('p1')
         ->defaultValue(0);
    $this->addFieldMapping('p2')
         ->defaultValue(0);
    $this->addFieldMapping('p3')
         ->defaultValue(0);
    $this->addFieldMapping('p4')
         ->defaultValue(0);
    $this->addFieldMapping('p5')
         ->defaultValue(0);
    $this->addFieldMapping('p6')
         ->defaultValue(0);
    $this->addFieldMapping('p7')
         ->defaultValue(0);
    $this->addFieldMapping('p8')
         ->defaultValue(0);
    $this->addFieldMapping('p9')
         ->defaultValue(0);
    $this->addFieldMapping('updated')
         ->defaultValue(0);


    $this->addUnmigratedDestinations(array(
#        'body:format', 'body:language',
#      'changed',
#      'comment',
#      'created',
#        'field_migrate_example_country:language',
#        'field_migrate_example_image:destination_dir',
#        'field_migrate_example_image:destination_file',
#        'field_migrate_example_image:file_replace',
#        'field_migrate_example_image:language',
#        'field_migrate_example_image:preserve_files',
#        'field_migrate_example_image:urlencode',
#      'is_new',
#      'language',
#      'log',
#        'migrate_example_beer_styles:source_type',
#        'migrate_example_beer_styles:create_term',
#      'promote',
#      'revision',
#      'revision_uid',
#      'status',
#      'tnid',
    ));
  }

  function saurus_get_new_id($class, $id) {
  $query = db_select('migrate_map_' . $class, 'm')
    ->fields('m', array('destid1'))
    ->condition('m.sourceid1', $id, '=');
  $result = $query->execute();
  $output = '';
  foreach ($result as $row) {
    $output = $row->destid1;
  }
  return $output;
  }

  public function prepareRow($current_row) {
    // Set the correct nid for the menu link.
    $current_row->new_nid = $this->saurus_get_new_id('saurusarticles', $current_row->objekt_id);
    $current_row->new_pid = $this->saurus_get_new_id('saurusmenu', $current_row->parent_id);
 
    return TRUE;
  }
}


/*
Class agriTest{
  public function getRelations(){
    $source_table_obj = 'objekt';
    $source_table_obj_obj = 'objekt_objekt';
    $source_table_obj_rub = 'obj_rubriik';

    $query = Database::getConnection('default', 'legacy_saurus')
            ->select($source_table_obj,'o')
            ->fields('o', array('objekt_id', 'friendly_url', 'count', 'pealkiri', 'tyyp_id', 'author', 'on_avaldatud', 'keel', 'aeg', 'created_user_id', 'is_hided_in_menu'));
    $query->innerJoin($source_table_obj_obj, 'o_rel', 'o_rel.objekt_id = o.objekt_id');
    $query->leftJoin($source_table_obj, 'parents', 'parents.objekt_id = o_rel.parent_id');
    $query->addField('o_rel', 'parent_id');
    $query->addField('parents', 'pealkiri', 'parent_name');
    $query->condition('o.tyyp_id', '1','='); // 1=taxonomy term | 2=article | 3=link (internal/external)
    $query->condition('o.keel', '0', '=');
    $query->orderBy('objekt_id', 'DESC');
    $result = $query->execute();
 
   return $result;
  }

  public function menuTaxonomyTerms(){
    $source_table_obj = 'objekt';
    $source_table_obj_obj = 'objekt_objekt';
    $source_table_obj_rub = 'obj_rubriik';

    $query = Database::getConnection('default', 'legacy_saurus')
            ->select($source_table_obj,'o')
            ->fields('o', array('objekt_id', 'friendly_url', 'count', 'pealkiri', 'tyyp_id', 'author', 'on_avaldatud', 'keel', 'aeg', 'created_user_id', 'is_hided_in_menu'));
    $query->innerJoin($source_table_obj_rub, 'o_rub', 'o_rub.objekt_id = o.objekt_id');
    $query->innerJoin($source_table_obj_obj, 'o_rel', 'o_rel.objekt_id = o_rub.objekt_id');
    $query->leftJoin($source_table_obj, 'parents', 'parents.objekt_id = o_rel.parent_id');
    $query->addField('o_rel', 'parent_id');
    $query->addField('parents', 'pealkiri', 'parent_name');
    $query->condition('o.tyyp_id', '1','='); // 1=taxonomy term | 2=article | 3=link (internal/external)
    $query->condition('o.keel', '0', '=');
    $query->orderBy('o.objekt_id', 'ASC');
    $result = $query->execute();
 
   return $result;
  }

  public function getParents($source){
  $rows = $source;

  $parents = array();

  foreach($rows as $value){
    if(!in_array($value->parent_name,$parents)){
      $parents[$value->objekt_id]=$value->parent_name;
    }
  }
  return $parents;
  }

#/*
$nodes = array();
$tree = array();
foreach ($source as &$node) {
  $node["Children"] = array();
  $id = $node["Menu"]["id"];
  $parent_id = $node["Menu"]["parent_id"];
  $nodes[$id] =& $node;
  if (array_key_exists($parent_id, $nodes)) {
    $nodes[$parent_id]["Children"][] =& $node;
  } else {
    $tree[] =& $node;
  }
}
#/

  public function getMenuTree(){
    $rows = $this->menuTaxonomyTerms();
    $parents = $this->getParents($this->menuTaxonomyTerms());
    $menu = array();

    foreach($rows as $key => $value){
      if (!isset($menu[$value->objekt_id])) {
        $menu[$value->objekt_id] = array();
        $menu[$value->objekt_id]['objekt_name'] = $value->pealkiri;
        $menu[$value->objekt_id]['objekt_parent_id'] = $value->parent_id;
        $menu[$value->objekt_id]['objekt_parent_name'] = $value->parent_name;
      }
      
      if (!empty($value->parent_id)) {
        $menu[$value->parent_id]['child'][$value->objekt_id] = & $menu[$value->objekt_id];
        $menu[$value->parent_id]['child'][$value->objekt_id]['objekt_name'] = & $menu[$value->objekt_id]['objekt_name'];
      } else {
        $menu[$value->objekt_id] = &$menu[$value->objekt_id];
      }
    }
    return $menu;
  }
}  

print "<pre>";

$agri = new agriTest();

/*
$result = $agri->getRelations();

$output = "<table><th>OBJEKT_ID</th> <th>PARENT_ID</th> <th>TITLE</th> <th>PARENT_TITLE</th>";
  foreach ($result as $row) {
    $output .= "\n<tr><td>" . $row->objekt_id . "</td><td>" . $row->parent_id . "</td><td>" . $row->pealkiri . "</td><td>" . $row->parent_name . "</td></tr>";
  }
  $output .= "</table>";
//print "<pre>" . $output . "</pre>";
#/


//print_r($agri->getMenuTree());


$test = $agri->menuTaxonomyTerms();

$output = "<table><th>OBJEKT_ID</th> <th>PARENT_ID</th> <th>TITLE</th> <th>PARENT_TITLE</th>";
  foreach ($test as $row) {
    $output .= "\n<tr><td>" . $row->objekt_id . "</td><td>" . $row->parent_id . "</td><td>" . $row->pealkiri . "</td><td>" . $row->parent_name . "</td></tr>";
  }
  $output .= "</table>";

//print $output;

print_r($agri->getMenuTree($agri->menuTaxonomyTerms()));

print "</pre>";
*/

